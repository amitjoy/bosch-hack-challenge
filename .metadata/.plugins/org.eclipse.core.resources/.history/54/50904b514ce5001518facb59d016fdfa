package com.amitinside.pollution.sense.application;

import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;

import org.apache.felix.scr.annotations.Activate;
import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Deactivate;
import org.apache.felix.scr.annotations.Reference;
import org.osgi.service.component.ComponentContext;

import com.amitinside.core.api.IPollutionPublishService;

@Component
public final class PollutionSense {

	private Future<?> handle;

	@Reference(bind = "bindPollutionPublishService", unbind = "unbindPollutionPublishService")
	private volatile IPollutionPublishService pollutionPublishService;

	private ScheduledExecutorService worker;

	@Activate
	protected synchronized void activate(final ComponentContext componentContext,
			final Map<String, Object> properties) {
		this.worker = Executors.newSingleThreadScheduledExecutor();
		this.pollutionPublishService.publishData(data);

	}

	public synchronized void bindPollutionPublishService(final IPollutionPublishService pollutionPublishService) {
		this.pollutionPublishService = pollutionPublishService;
	}

	@Deactivate
	protected synchronized void deactivate(final ComponentContext context) {
		this.worker.shutdown();
	}

	public synchronized void unbindPollutionPublishService(final IPollutionPublishService pollutionPublishService) {

	}

}
